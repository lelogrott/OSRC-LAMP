Apache Subversion - SVN

Introdução
História:
No começo do ano 2000, a CollabNet, Inc. (http://www.collab.net) começou a procurar desenvolvedores 
para desenvolver um substituto para o CVS. A CollabNet já tinha uma suite colaborativa chamada CollabNet 
Enterprise Edition (CEE) cujo um de seus componentes era o controle de versão. Apesar de o CEE usar o CVS como 
seu sistema de controle de versão inicial, as limitações do CVS ficaram evidentes desde o princípio, e a 
CollabNet sabia que eventualmente teria que procurar por algo melhor. Infelizmente, o CVS havia se firmado 
como um padrão de fact no mundo open source principalmente porque não havia nada melhor, pelo menos sob 
licença livre. Então a CollabNet decidiu desenvolver um novo sistema de controle de versão a partir do zero, 
mantendo as idéias básicas do CVS, mas sem os bugs e seus inconvenientes.
Motivação:
A equipe do projeto original determinou alguns objetivos simples. Eles não queriam romper com a metodologia 
existente para controle de versão, eles apenas queriam corrigir o CVS. Eles decidiram que o Subversion deveria 
ser compatível com as características do CVS, e manter o mesmo modelo de desenvolvimento, mas não 
reproduzir as falhas mais óbvias do CVS. E mesmo que o novo sistema não fosse um substituto definitivo para o 
CVS, ele deveria ser suficientemente semelhante a este para que qualquer usuário do CVS pudesse migrar de 
sistema com pouco esforço.
Quem usa:
É amplamente utilizado pela comunidade de Software Livre.
Utilizado pela Google, Apache Foundation e pela Apple.


Características em particular.
Versionamento de diretórios
O CVS apenas rastreia o histórico de arquivos individuais, já o Subversion implementa um 
sistema de arquivos “virtual” sob controle de versão que rastreia modificações a toda a 
árvore de diretório ao longo do tempo. Os arquivos e os diretórios são versionados.

Histórico de versões efetivo
Como o CVS é limitado apenas ao versionamento de arquivos, operações como cópia e 
renomeação—que podem ocorrer com arquivos também, mas que são realmente alterações no 
conteúdo de algum diretório continente—não são suportadas no CVS. Adicionalmente, no 
CVS você não pode substituir um arquivo versionado por alguma outra coisa com o mesmo 
nome sem que o novo item deixe de herdar o histórico do arquivo antigo—que talvez seja 
até algo com o qual não mantenha nenhuma correlação. Com o Subversion, você pode 
adicionar, excluir, copiar, e renomear ambos os arquivos ou diretórios. E cada novo 
arquivo adicionado começa com um histórico próprio e completamente novo.

Commits atômicos
Um conjunto de modificações ou é inteiramente registrado no repositório, ou não é 
registrado de forma nenhuma. Isto possibilita aos desenvolvedores criarem e 
registrarem alterações como blocos lógicos, e também evita problemas que possam ocorrer 
quando apenas uma parte de um conjunto de alterações seja enviada com sucesso ao repositório.

Versionamento de metadados
Cada arquivo e diretório tem um conjunto de propriedades—chaves e seus valores—associados 
consigo. Você pode criar e armazenar quaisquer pares chave/valor que quiser. As 
propriedades são versionadas ao longo do tempo, tal como os conteúdos de arquivo.

Manipulação consistente de dados
O Subversion exprime as diferenças de arquivo usando um algoritmo diferenciado, o qual 
funciona de maneira idêntica tanto em arquivos texto (compreensível para humanos) quanto em 
arquivos binários (incompreensível para humanos). Ambos os tipos de arquivos são igualmente 
armazenados de forma compactada no repositório, e as diferenças são enviadas em ambas as 
direções pela rede.

Ramificações e rotulagem eficiente
O custo de se fazer ramificações (branching) e de rotulagem (tagging) não precisa ser proporcional ao tamanho do projeto. O Subversion cria ramos e rótulos simplesmente copiando o projeto, usando um mecanismo semelhante a um hard-link. Assim essas operações levam apenas uma pequena e constante quantidade de tempo.

Hackability
O Subversion não tem qualquer bagagem histórica; ele é implementado como um conjunto de bibliotecas C compartilhadas com APIs bem definidas. Isto torna o Subversion extremamente manutenível e usável por outras aplicações e linguagens.

Repositṕrio: É centralizado. Os arquivos são armazenados em uma estrutura de árvore, a qual é típica em sistemas de arquivos.
O SVN memoriza as alterações, não só arquivo propriamente dito.
Confiabilidade: Commit é uma operação átomica, então se um commit é interrompido, não há risco de corroper os arquivos ou gerar inconsistência.
Não utiliza a solução Lock-Modify-Unlck e sim a Copy-Modify-Merge. O que evita problemas administrativos, a 
serialização do desenvolvimento e alguns problemas de incompatibilidade semântica. Ainda sim existe a possibilidade de dar lock em
um arquivo, pois é necessário em arquivos binários, quando não existe como rastrear de maneira eficiente as mudanças no conteúdo.
Velocidade: Fazer um Branche é uma operação barata. Os custos são proporcionais a mudança, não ao tamanho do arquivo.
Comparativo com o git.

Conceitos Básicos:
Repository (Repositório)
É onde fica todos os arquivos do projeto e os arquivos de gerenciamento do SVN. Por padrão um repositório tem quatro pastas:
trunk, branches, tags e .svn.
A pasta .svn é onde são armazenados os arquivos de gerenciamento do svn.

Trunk (Tronco): É a linha principal de desenvolvimento. Geralmente o desenvolvimento de novas funcionalidade não acontece no trunk.
No trunk somente são guardados funcionalidades já finalizadas.

Branches (Ramos): É um linha de desenvolvimento separada, que pode começar como uma copia do trunk ou de outro branche.
Cheap Copy: Somente cria novos dados quando necessario.
Eventualmente pode existir o interesse de fundir um ramo com o tronco, ou o ramo com outro ramo.
You should remember two important lessons from this section. First, Subversion has no internal concept of a branch—it knows only how to make copies. 
When you copy a directory, the resultant directory is only a “branch” because you attach that meaning to it. You may think of the directory differently, or 
treat it differently, but to Subversion it's just an ordinary directory that happens to carry some extra historical information.
Second, because of this copy mechanism, Subversion's branches exist as normal filesystem directories in the repository. This is different from other version 
control systems, where branches are typically defined by adding extra-dimensional “labels” to collections of files. The location of your branch directory doesn't 
matter to Subversion. Most teams follow a convention of putting all branches into a /branches directory, but you're free to invent any policy you wish.

Tags: São etiquetas que referenciam um revisão.

Modificando arquivos:
O Problema do Compartilhamento de Arquivos

Todos os sistemas de controle de versão têm de resolver o mesmo problema fundamental: como o sistema irá permitir que os usuários 
compartilhem informação, e como ele irá prevenir que eles acidentalmente tropecem uns nos pés dos outros? É muito fácil para os 
usuários acidentalmente sobrescrever as mudanças feitas pelos outros no repositório.

Considere o cenário mostrado em Figura 1.2, “O problema para evitar”. Vamos supor que nós temos dois colegas de trabalho, Harry e Sally. 
Cada um deles decide editar o mesmo arquivo no repositório ao mesmo tempo. Se Harry salvar suas alterações no repositório 
primeiro, então é possível que (poucos momentos depois) Sally possa acidentalmente sobrescrevê-lo com a sua própria nova versão do 
arquivo. Embora a versão de Harry não seja perdida para sempre (porque o sistema se lembra de cada mudança), todas as mudanças 
feitas por Harry não vão estar presentes na versão mais recente do arquivo de Sally, porque ela nunca viu as mudanças de Harry's para 
começar. O trabalho de Harry efetivamente se perdeu - ou pelo menos desapareceu da última versão do arquivo - e provavelmente por 
acidente. Trata-se definitivamente de uma situação que queremos evitar!


Muitos sistemas de controle de versão usam o modelo 
lock-modify-unlock (travar-modificar-destravar) para resolver o problema de vários 
autores destruírem o trabalho uns dos outros. Neste modelo, o repositório permite que 
apenas uma pessoa de cada vez altere o arquivo. Essa política de exclusividade é 
gerenciada usando locks (travas). Harry precisa “travar ” (lock) um arquivo antes que 
possa fazer alterações nele. Se Harry tiver travado o arquivo, então Sally não poderá 
travá-lo também, e portanto, não poderá fazer nenhuma alteração nele. Tudo que ela pode 
fazer é ler o arquivo, e esperar que Harry termine suas alterações e destrave (unlock) o 
arquivo. Depois que Harry destravar o arquivo, Sally poderá ter a sua chance de 
travar e editar o arquivo. A figura Figura 1.3, “A solução lock-modify-unlock” 
demonstra essa solução simples.

Locks podem causar problemas administrativos. Algumas vezes Harry irá travar o 
arquivo e se esquecer disso. Entretanto, devido a Sally ainda estar esperando para 
editar o arquivo, suas mãos estão atadas. E Harry então sai de férias. Agora 
Sally tem que pedir a um administrador para destravar o arquivo que Harry travou. 
Essa situação acaba causando uma série de atrasos desnecessários e perda de tempo.

Locking pode causar serialização desnecessária. E se Harry está editando o 
começo de um arquivo de texto, e Sally simplesmente quer editar o final do mesmo 
arquivo? Essas mudanças não vão se sobrepor afinal. Eles podem facilmente editar o 
arquivo simultaneamente, sem grandes danos, assumindo que as alterações serão 
apropriadamente fundidas depois. Não há necessidade de se trabalhar em turnos 
nessa situação.

Locking pode criar falsa sensação de segurança. Suponha que Harry trave e edite o 
arquivo A, enquanto Sally simultaneamente trava e edita o arquivo B. Mas e se A e B 
dependem um do outro, e se as mudanças feitas em cada são semanticamente 
incompatíveis? Subitamente A e B não funcionam juntos mais. O sistema de locking não 
foi suficientemente poderoso para prevenir o problema - ainda que de certa forma 
tenha proporcionado uma falsa sensação de segurança. É fácil para Harry e Sally 
imaginar que travando os arquivos, cada um está começando uma tarefa isolada 
segura, e assim não se preocupar em discutir as incompatibilidades que virão com suas 
mudanças. Locking freqüentemente se torna um substituto para a comunicação real.

A Solução Copy-Modify-Merge

O Subversion, CVS, e muitos outros sistemas de controle de versão usam um modelo de copy-modify-merge (copiar-modificar-fundir) 
como uma alternativa ao locking. Nesse modelo, cada usuário se conecta ao repositório do projeto e cria uma cópia de 
trabalho pessoal (personal working copy, ou cópia local) - um espelho local dos arquivos e diretórios do repositório. Os usuários então 
trabalham simultaneamente e independentemente, modificando suas cópias privadas. Finalmente, as cópias privadas são fundidas (merged) 
numa nova versão final. O sistema de controle de versão freqüentemente ajuda com a fusão, mas, no final, a intervenção 
humana é a única capaz de garantir que as mudanças foram realizadas de forma correta.

Aqui vai um exemplo. Digamos que Harry e Sally criaram cada um a sua cópia de trabalho de um mesmo projeto, copiadas do 
repositório. Eles trabalharam simultaneamente fazendo alterações no arquivo A nas suas próprias cópias. Sally salva suas alterações no 
repositório primeiro. Quando Harry tentar salvar suas alterações mais tarde, o repositório vai informá-lo que seu arquivo A está 
desatualizado (out-of-date). Em outras palavras, o arquivo A do repositório foi de alguma forma alterado desde a última vez que ele 
foi copiado. Então Harry pede a seu programa cliente para ajudá-lo a fundir (merge) todas as alterações do repositório na sua cópia de 
trabalho do arquivo A. Provavelmente, as mudanças de Sally não se sobrepõem com as suas próprias; então, uma vez que ele tiver 
ambos os conjuntos de alterações integrados, ele salva sua cópia de trabalho de volta no repositório. As figuras 
Figura 1.4, “A solução copy-modify-merge” e Figura 1.5, “A solução copy-modify-merge (continuando)” mostram este processo.

Revisão: É um estado na árvore de arquivos. Cada commit adiciona um novo estado associado à um número, incrementado de um em relação à 
revisão anterior.

Comandos Básicos:
Suponto que o repositório central já está pronto par ao uso... www.assembla.com
Baixar uma copia do repositorio: svn checkout url
Adicionar arquivos: svn add arquivo.c
Commitar arquivos: svn commit -m "Fisrt commit"

Merge: Junta duas linhas de desenvolvimento. Pode acontecer conflito. Nesses casos existem 3 opções. Ficar com a copia atual, ficar com a copia de terceiros ou juntas mesclar
arquivos e resolver manualmente.
Merge reintegrate: Deve acontecer sem problemas se o merge ja foi feito no branche.
Update: Atualiza a copia local com a do servidor
Resolve: Sinaliza como o clonflito foi resolvido.

Referencias
https://svnbook-pt-br.googlecode.com/svn/snapshots/1.4/svn.basic.html
